(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Libretto,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Libretto = (function() {
    Libretto.extend = function(obj) {
      var cls, key, val;
      cls = (function(_super) {
        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        return _Class;

      })(this);
      for (key in obj) {
        val = obj[key];
        cls.prototype[key] = val;
      }
      return cls;
    };

    Libretto.prototype.getNextStep = function(next) {
      if (next == null) {
        next = null;
      }
      if (this.steps instanceof Array) {
        if (next === '_pre_') {
          return this.steps[0];
        }
        if ((typeof next) === 'string') {
          if (this.steps instanceof Array) {
            if (this.steps.indexOf(next) >= 0) {
              return next;
            }
          }
          throw "Destination missing: " + next;
        } else {
          return this.steps[this.steps.indexOf(this.current) + 1];
        }
      } else if (this.steps instanceof Object) {
        if ((typeof next) === 'string') {
          if (next === '_pre_') {
            return 'start';
          }
          if (this.steps[this.current].length != null) {
            if (__indexOf.call(this.steps[this.current], next) >= 0) {
              return next;
            }
            throw "Can't go " + next + " from " + this.current;
          } else {
            return next;
          }
        } else {
          if (this.current === 'end') {
            return null;
          }
          if ((this.steps[this.current].length != null) && !((typeof this.steps[this.current]) === 'string')) {
            if (next == null) {
              throw "Must return in branch";
            }
          }
          if (!this.steps[this.current]) {
            throw 'error';
          }
          return this.steps[this.current];
        }
      }
    };

    function Libretto() {
      this.dispose = __bind(this.dispose, this);
      this.cancel = __bind(this.cancel, this);
      this.then = __bind(this.then, this);
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      var context;
      context = {};
      this._promise = new Promise((function(_this) {
        return function(done) {
          var action;
          action = function(result) {
            _this.current = _this.getNextStep(result);
            if (!_this.current) {
              return done(context);
            }
            return Promise.resolve(_this[_this.current](context)).then(action);
          };
          return _this.ready = function() {
            action('_pre_');
            return this._promise;
          };
        };
      })(this));
    }

    Libretto.prototype.start = function() {};

    Libretto.prototype.end = function(context) {};

    Libretto.prototype.then = function(f) {
      return this._promise.then(f);
    };

    Libretto.prototype.cancel = function() {
      return Promise.reject(this._promise);
    };

    Libretto.prototype.dispose = function() {
      delete this._promise;
      return this.cancel();
    };

    return Libretto;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.Libretto = Libretto;
  } else if (typeof module !== "undefined" && module !== null) {
    module.exports = Libretto;
  }

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Momic, applyHooks, defer, dequal, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  defer = function(f) {
    return new Promise((function(_this) {
      return function(done, reject) {
        return f(done, reject);
      };
    })(this));
  };

  uuid = (function(_this) {
    return function() {
      var s4;
      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return s4() + s4() + s4() + s4();
    };
  })(this);

  
function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}
;

  dequal = function(left, right) {
    var i, isLeftPrimitive, isRightPrimitive, key, results, _ref, _ref1;
    isLeftPrimitive = (_ref = typeof left) === 'string' || _ref === 'number' || _ref === 'boolean' || _ref === 'undefined';
    isRightPrimitive = (_ref1 = typeof right) === 'string' || _ref1 === 'number' || _ref1 === 'boolean' || _ref1 === 'undefined';
    if (isLeftPrimitive && isRightPrimitive) {
      return left === right;
    }
    if (isLeftPrimitive || isRightPrimitive) {
      return false;
    }
    results = (function() {
      var _i, _len, _results, _results1;
      if (left instanceof Array) {
        _results = [];
        for (_i = 0, _len = left.length; _i < _len; _i++) {
          i = left[_i];
          _results.push(dequal(left[i], right[i]));
        }
        return _results;
      } else if (left instanceof Object) {
        _results1 = [];
        for (key in left) {
          _results1.push(dequal(left[key], right[key]));
        }
        return _results1;
      }
    })();
    return (results.filter(function(item) {
      return item;
    })).length === results.length;
  };

  applyHooks = function(items, hooks) {
    var hook, i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      i = items[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = hooks.length; _j < _len1; _j++) {
          hook = hooks[_j];
          _results1.push(hook(i));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Momic = {};

  Momic.deepClone = clone;

  Momic.Collection = (function() {
    Collection.dequal = dequal;

    Collection.prototype.addPlugin = function(_arg) {
      var initialize, postSaveHook, preInsertHook, preSaveHook;
      initialize = _arg.initialize, preInsertHook = _arg.preInsertHook, this.preUpdateHook = _arg.preUpdateHook, preSaveHook = _arg.preSaveHook, postSaveHook = _arg.postSaveHook;
      if (initialize != null) {
        initialize(this);
      }
      if (preInsertHook != null) {
        this.preInsertHooks.push(preInsertHook);
      }
      if (typeof preUpdateHook !== "undefined" && preUpdateHook !== null) {
        this.preUpdateHooks.push(preUpdateHook);
      }
      if (preSaveHook != null) {
        this.preSaveHooks.push(preSaveHook);
      }
      if (postSaveHook != null) {
        return this.postSaveHooks.push(postSaveHook);
      }
    };

    function Collection(key, _arg) {
      var IdAutoInsertionPlugin, plugin, _i, _len, _ref;
      this.key = key;
      this.schema = _arg.schema, this.hasInstance = _arg.hasInstance, this.hasPersistence = _arg.hasPersistence, this.endpoint = _arg.endpoint, this.autoSave = _arg.autoSave, this.plugins = _arg.plugins, this.indexes = _arg.indexes;
      this.init = __bind(this.init, this);
      this.remove = __bind(this.remove, this);
      this.find = __bind(this.find, this);
      this.getById = __bind(this.getById, this);
      this.findById = __bind(this.findById, this);
      this.findOne = __bind(this.findOne, this);
      this.drop = __bind(this.drop, this);
      this.insert = __bind(this.insert, this);
      this.update = __bind(this.update, this);
      this.save = __bind(this.save, this);
      this.saved = __bind(this.saved, this);
      this.loadContent = __bind(this.loadContent, this);
      this.updateInstanceIfNeeded = __bind(this.updateInstanceIfNeeded, this);
      this.load = __bind(this.load, this);
      this.count = __bind(this.count, this);
      this._updateCount = __bind(this._updateCount, this);
      this.updateIndex = __bind(this.updateIndex, this);
      this.resetItemsIndex = __bind(this.resetItemsIndex, this);
      if (this.autoSave == null) {
        this.autoSave = true;
      }
      if (this.hasPersistence == null) {
        this.hasPersistence = true;
      }
      if (this.hasInstance == null) {
        this.hasInstance = true;
      }
      this.preInsertHooks = [];
      this.preUpdateHooks = [];
      this.preSaveHooks = [];
      this.postSaveHooks = [];
      IdAutoInsertionPlugin = {
        preInsertHook: function(item) {
          return item.id != null ? item.id : item.id = uuid();
        }
      };
      this.addPlugin(IdAutoInsertionPlugin);
      if (this.plugins != null) {
        _ref = this.plugins;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plugin = _ref[_i];
          this.addPlugin(plugin);
        }
      }
      if (!(this.hasInstance || this.hasPersistence)) {
        throw new Error('hasInstance or hasPersistence must be true');
      }
      this._count = 0;
      this._instance = null;
      if (this.indexes == null) {
        this.indexes = ['id'];
      }
      this._indexesData = {};
    }

    Collection.prototype.initIndexes = function() {
      var indexName, _i, _len, _ref, _results;
      _ref = this.indexes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        indexName = _ref[_i];
        _results.push(this.resetItemsIndex(indexName));
      }
      return _results;
    };

    Collection.prototype.resetItemsIndex = function(indexName) {
      var item, _i, _len, _ref, _results;
      this._indexesData[indexName] = {};
      _ref = this._instance;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(this.updateIndex(indexName, item[indexName]));
      }
      return _results;
    };

    Collection.prototype.updateIndex = function(indexName, val, index) {
      var indexes;
      indexes = this._indexesData[indexName];
      if (indexes[val] != null) {
        return indexes[val].push(index);
      } else {
        return this._indexesData[indexName][val] = [index];
      }
    };

    Collection.prototype._updateCount = function(_count) {
      this._count = _count;
    };

    Collection.prototype.count = function() {
      return this._count;
    };

    Collection.prototype.load = function() {
      return defer((function(_this) {
        return function(done) {
          return localforage.getItem(_this.key).then(function(content) {
            return done(content);
          });
        };
      })(this));
    };

    Collection.prototype.updateInstanceIfNeeded = function(instance) {
      if (this.hasInstance) {
        return this._instance = instance;
      }
    };

    Collection.prototype.loadContent = function() {
      return defer((function(_this) {
        return function(done) {
          if (_this.hasInstance && _this._instance) {
            return done(_this._instance);
          } else {
            return _this.load().then(function(content) {
              return done(content);
            });
          }
        };
      })(this));
    };

    Collection.prototype.saved = function() {
      return this._saved;
    };

    Collection.prototype.save = function(content) {
      return defer((function(_this) {
        return function(done) {
          var hook, tosave, _i, _len, _ref;
          if (!_this.hasPersistence) {
            throw "`" + _this.key + "` collection doesn't have storage";
          }
          tosave = content != null ? content : _this._instance;
          _ref = _this.preSaveHooks;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            hook = _ref[_i];
            hook(tosave);
          }
          return localforage.setItem(_this.key, tosave).then(function() {
            var _j, _len1, _ref1;
            _this.updateInstanceIfNeeded(tosave);
            _this._saved = true;
            _ref1 = _this.postSaveHooks;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              hook = _ref1[_j];
              hook(tosave);
            }
            return done();
          });
        };
      })(this));
    };

    Collection.prototype.update = function(obj) {
      return defer((function(_this) {
        return function(done) {
          var array;
          array = obj.length != null ? obj : [obj];
          return _this.loadContent().then(function(content) {
            var c, item, key, n, val, _i, _j, _len, _len1;
            for (_i = 0, _len = array.length; _i < _len; _i++) {
              item = array[_i];
              for (n = _j = 0, _len1 = content.length; _j < _len1; n = ++_j) {
                c = content[n];
                if (c.id === item.id) {
                  for (key in item) {
                    val = item[key];
                    content[n][key] = val;
                  }
                  break;
                }
              }
            }
            applyHooks(content, _this.preUpdateHooks);
            _this.updateInstanceIfNeeded(content);
            if (_this.autoSave) {
              return _this.save(content).then(function() {
                return done(clone(array));
              });
            } else {
              _this._saved = false;
              return done(clone(array));
            }
          });
        };
      })(this));
    };

    Collection.prototype.insert = function(obj) {
      return defer((function(_this) {
        return function(done) {
          var array, ret;
          array = obj.length ? obj.map(function(i) {
            var ret;
            ret = clone(i);
            return ret;
          }) : (ret = clone(obj), [ret]);
          applyHooks(array, _this.preInsertHooks);
          return _this.loadContent().then(function(content) {
            var beforeIndexLength, i, n, _i, _j, _len, _len1;
            beforeIndexLength = content.length;
            for (_i = 0, _len = array.length; _i < _len; _i++) {
              i = array[_i];
              content.push(i);
            }
            for (n = _j = 0, _len1 = array.length; _j < _len1; n = ++_j) {
              i = array[n];
              _this.updateIndex('id', i.id, beforeIndexLength + n);
            }
            _this._updateCount(content.length);
            if (_this.autoSave) {
              return _this.save().then(function() {
                if (_this.hasInstance) {
                  _this._instance = content;
                }
                return done(clone(array));
              });
            } else {
              _this._saved = false;
              if (_this.hasInstance) {
                _this._instance = content;
              }
              return done(clone(array));
            }
          });
        };
      })(this));
    };

    Collection.prototype.drop = function() {
      return defer((function(_this) {
        return function(done) {
          return localforage.setItem(_this.key, []).then(function() {
            return done();
          });
        };
      })(this));
    };

    Collection.prototype.findOne = function(func_or_obj) {
      return defer((function(_this) {
        return function(done) {
          return _this.find(func_or_obj).then(function(_arg) {
            var first;
            first = _arg[0];
            return done(clone(first));
          });
        };
      })(this));
    };

    Collection.prototype.findById = function(id) {
      return defer((function(_this) {
        return function(done) {
          var index;
          if (!_this.hasInstance) {
            throw 'need hasInstance';
          }
          index = _this._indexesData['id'][id][0];
          return done(clone(_this._instance[index]));
        };
      })(this));
    };

    Collection.prototype.getById = function(id) {
      var index;
      if (!this.hasInstance) {
        throw 'need hasInstance';
      }
      index = this._indexesData['id'][id][0];
      return clone(this._instance[index]);
    };

    Collection.prototype.find = function(func_or_obj) {
      if (func_or_obj == null) {
        func_or_obj = null;
      }
      return defer((function(_this) {
        return function(done) {
          return _this.loadContent().then(function(content) {
            var func, queryObj, results;
            results = func_or_obj == null ? content : (func = func_or_obj) instanceof Function ? content.filter(function(item) {
              return func(item);
            }) : (queryObj = func_or_obj) instanceof Object ? content.filter(function(item) {
              return dequal(queryObj, item);
            }) : void 0;
            return done(clone(results));
          });
        };
      })(this));
    };

    Collection.prototype.remove = function(func_or_obj) {
      var d;
      return d = defer((function(_this) {
        return function(done) {
          var c, loading;
          c = null;
          loading = defer(function(done) {
            return _this.loadContent().then(function(content) {
              c = content;
              return done(content);
            });
          });
          return loading.then(function(content) {
            return _this.find(func_or_obj).then(function(toremove) {
              var remove_ids;
              remove_ids = toremove.map(function(i) {
                return i.id;
              });
              content = content.filter(function(item) {
                var _ref;
                return _ref = item.id, __indexOf.call(remove_ids, _ref) < 0;
              });
              return _this.save(content).then(function() {
                _this._updateCount(content.length);
                return done();
              });
            });
          });
        };
      })(this));
    };

    Collection.prototype.init = function() {
      return defer((function(_this) {
        return function(done) {
          return localforage.getItem(_this.key, function(content) {
            if (content == null) {
              content = [];
            }
            if (_this.hasInstance) {
              _this._instance = content;
              _this.initIndexes();
            }
            if (_this.hasPersistence) {
              return _this.save(content).then(function() {
                return done();
              });
            } else {
              _this._updateCount(content.length);
              return done();
            }
          });
        };
      })(this));
    };

    return Collection;

  })();

  Momic.DB = (function() {
    DB.prototype.collectionKey = function(collectionName) {
      return this.prefix + '_' + collectionName;
    };

    function DB(opts) {
      this.init = __bind(this.init, this);
      this.collectionKey = __bind(this.collectionKey, this);
      var colOpts, key, _ref;
      this.initialized = false;
      this.prefix = (opts != null ? opts.name : void 0) || '';
      this.storage = (opts != null ? opts.storage : void 0) || 'localforage';
      this.collections = [];
      _ref = opts != null ? opts.collections : void 0;
      for (key in _ref) {
        colOpts = _ref[key];
        this.addCollection(key, colOpts);
      }
    }

    DB.prototype.init = function() {
      return defer((function(_this) {
        return function(done) {
          var inits;
          inits = _this.collections.map(function(col) {
            return col.init();
          });
          return Promise.all(inits).then(function() {
            _this.initialized = true;
            return done();
          });
        };
      })(this));
    };

    DB.prototype.addCollection = function(key, colOpts) {
      if (key === 'initialized' || key === 'prefix' || key === 'storage' || key === 'init' || key === 'collectionKey' || key === 'addCollection') {
        throw new Error("'" + key + "' is reserved word");
      }
      if (colOpts.storage == null) {
        colOpts.storage = this.storage;
      }
      this[key] = new Momic.Collection(this.collectionKey(key), colOpts);
      this.collections.push(this[key]);
      if (this.initialized) {
        return defer((function(_this) {
          return function(done) {
            return _this[key].init().then(function() {
              return done();
            });
          };
        })(this));
      } else {
        return this[key];
      }
    };

    return DB;

  })();

  Momic.Model = (function() {
    Model.setup = function(opts) {
      return defer(function(done) {
        var db;
        db = new Momic.DB(opts);
        return db.init().then(function() {
          return done();
        });
      });
    };

    Model.setDB = function(db) {
      return Model._db = db;
    };

    Model.getDB = function() {
      return Model._db;
    };

    Model.count = function() {
      return this.getCollection().count();
    };

    Model.extend = function(obj) {
      var cls, key, val;
      cls = (function(_super) {
        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        return _Class;

      })(this);
      for (key in obj) {
        val = obj[key];
        cls.prototype[key] = val;
      }
      return cls;
    };

    Model.getCollection = function() {
      var db;
      if (!this.prototype.key) {
        throw 'Need key';
      }
      db = this.getDB();
      return db[this.prototype.key];
    };

    Model.find = function(query) {
      return defer((function(_this) {
        return function(done) {
          var col;
          col = _this.getCollection();
          return col.find(query).then(function(items) {
            return done(items.map(function(item) {
              return new _this(item);
            }));
          });
        };
      })(this));
    };

    Model.remove = function(query) {
      return defer((function(_this) {
        return function(done) {
          var col;
          col = _this.getCollection();
          return col.remove(query).then(function() {
            return done();
          });
        };
      })(this));
    };

    Model.update = function(obj) {
      return defer((function(_this) {
        return function(done) {
          var col;
          col = _this.getCollection();
          return col.update(obj).then(function(updatedItems) {
            return done(updatedItems.map(function(item) {
              return new _this(item);
            }));
          });
        };
      })(this));
    };

    Model.insert = function(obj) {
      return defer((function(_this) {
        return function(done) {
          var col;
          col = _this.getCollection();
          return col.insert(obj).then(function(insertedItems) {
            return done(insertedItems.map(function(item) {
              return new _this(item);
            }));
          });
        };
      })(this));
    };

    Model.findOne = function(query) {
      return defer((function(_this) {
        return function(done) {
          var col;
          col = _this.getCollection();
          return col.findOne(query).then(function(item) {
            return done(new _this(item));
          });
        };
      })(this));
    };

    function Model(params) {
      if (params == null) {
        params = {};
      }
      this.updateParams(params);
    }

    Model.prototype.updateParams = function(obj) {
      var key, val, _results;
      _results = [];
      for (key in obj) {
        val = obj[key];
        _results.push(this[key] = val);
      }
      return _results;
    };

    Model.prototype.save = function(obj) {
      if (obj == null) {
        obj = null;
      }
      if (this.disposed) {
        throw 'Already disposed';
      }
      return defer((function(_this) {
        return function(done) {
          if (obj != null) {
            _this.updateParams(obj);
          }
          if (_this.id != null) {
            return _this.constructor.update(_this.toJSON()).then(function(_arg) {
              var item;
              item = _arg[0];
              _this.updateParams(item);
              return done();
            });
          } else {
            return _this.constructor.insert(_this.toJSON()).then(function(_arg) {
              var item;
              item = _arg[0];
              _this.updateParams(item);
              return done();
            });
          }
        };
      })(this));
    };

    Model.prototype.fetch = function(id) {
      return defer((function(_this) {
        return function(done) {
          return _this.constructor.findOne({
            id: id
          }).then(function(item) {
            _this.updateParams(item);
            return done();
          });
        };
      })(this));
    };

    Model.prototype.remove = function() {
      if (!this.id) {
        throw 'Not saved';
      }
      if (this.disposed) {
        throw 'Already disposed';
      }
      return defer((function(_this) {
        return function(done) {
          return _this.constructor.remove({
            id: _this.id
          }).then(function() {
            _this.dispose();
            return done();
          });
        };
      })(this));
    };

    Model.prototype.toJSON = function() {
      var key, obj, val;
      if (this.disposed) {
        throw 'Already disposed';
      }
      obj = {};
      for (key in this) {
        val = this[key];
        if (!(val instanceof Function) && this.hasOwnProperty(key)) {
          obj[key] = val;
        }
      }
      return clone(obj);
    };

    Model.prototype.dispose = function() {
      var key;
      if (this.disposed) {
        throw 'Already disposed';
      }
      for (key in this) {
        if (this.hasOwnProperty(key)) {
          delete this[key];
        }
      }
      this.disposed = true;
      return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
    };

    return Model;

  })();

  if ((typeof define) === 'function' && (typeof define.amd) === 'object' && define.amd) {
    define(Momic);
  } else {
    window.Momic = Momic;
  }

}).call(this);

},{}],3:[function(require,module,exports){
/****
 * Grapnel.js
 * https://github.com/EngineeringMode/Grapnel.js
 *
 * @author Greg Sabia Tucker
 * @link http://artificer.io
 * @version 0.4.1
 *
 * Released under MIT License. See LICENSE.txt or http://opensource.org/licenses/MIT
*/

(function(root){

    function Grapnel(){
        "use strict";

        var self = this; // Scope reference
        this.events = {}; // Event Listeners
        this.params = []; // Named parameters
        this.state = null; // Event state
        this.version = '0.4.1'; // Version
        // Anchor
        this.anchor = {
            defaultHash : window.location.hash,
            get : function(){
                return (window.location.hash) ? window.location.hash.split('#')[1] : '';
            },
            set : function(anchor){
                window.location.hash = (!anchor) ? '' : anchor;
                return self;
            },
            clear : function(){
                return this.set(false);
            },
            reset : function(){
                return this.set(this.defaultHash);
            }
        }
        /**
         * ForEach workaround
         *
         * @param {Array} to iterate
         * @param {Function} callback
        */
        this._forEach = function(a, callback){
            if(typeof Array.prototype.forEach === 'function') return Array.prototype.forEach.call(a, callback);
            // Replicate forEach()
            return function(c, next){
                for(var i=0, n = this.length; i<n; ++i){
                    c.call(next, this[i], i, this);
                }
            }.call(a, callback);
        }
        /**
         * Fire an event listener
         *
         * @param {String} event
         * @param {Mixed} [attributes] Parameters that will be applied to event listener
         * @return self
        */
        this.trigger = function(event){
            var params = Array.prototype.slice.call(arguments, 1);
            // Call matching events
            if(this.events[event]){
                this._forEach(this.events[event], function(fn){
                    fn.apply(self, params);
                });
            }

            return this;
        }
        // Check current hash change event -- if one exists already, add it to the queue
        if(typeof window.onhashchange === 'function') this.on('hashchange', window.onhashchange);
        /**
         * Hash change event
         * TODO: increase browser compatibility. "window.onhashchange" can be supplemented in older browsers with setInterval()
        */
        window.onhashchange = function(){
            self.trigger('hashchange');
        }

        return this.trigger('initialized');
    }
    /**
     * Create a RegExp Route from a string
     * This is the heart of the router and I've made it as small as possible!
     *
     * @param {String} Path of route
     * @param {Array} Array of keys to fill
     * @param {Bool} Case sensitive comparison
     * @param {Bool} Strict mode
    */
    Grapnel.regexRoute = function(path, keys, sensitive, strict){
        if(path instanceof RegExp) return path;
        if(path instanceof Array) path = '(' + path.join('|') + ')';
        // Build route RegExp
        path = path.concat(strict ? '' : '/?')
            .replace(/\/\(/g, '(?:/')
            .replace(/\+/g, '__plus__')
            .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional){
                keys.push({ name : key, optional : !!optional });
                slash = slash || '';

                return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');
            })
            .replace(/([\/.])/g, '\\$1')
            .replace(/__plus__/g, '(.+)')
            .replace(/\*/g, '(.*)');

        return new RegExp('^' + path + '$', sensitive ? '' : 'i');
    }
    /**
     * Add an action and handler
     *
     * @param {String|RegExp} action name
     * @param {Function} callback
     * @return self
    */
    Grapnel.prototype.get = Grapnel.prototype.add = function(route, handler){
        var self = this,
            keys = [],
            regex = Grapnel.regexRoute(route, keys);

        var invoke = function(){
            // If action is instance of RegEx, match the action
            var match = self.anchor.get().match(regex);
            // Test matches against current action
            if(match){
                // Match found
                var event = {
                    route : route,
                    value : self.anchor.get(),
                    handler : handler,
                    params : self.params,
                    regex : match,
                    propagateEvent : true,
                    previousState : self.state,
                    preventDefault : function(){
                        this.propagateEvent = false;
                    }
                }
                // Trigger main event
                self.trigger('match', event);
                // Continue?
                if(!event.propagateEvent) return self;
                // Save new state
                self.state = event;
                // Callback
                var req = { params : {}, keys : keys, matches : event.regex.slice(1) };
                // Build parameters
                self._forEach(req.matches, function(value, i){
                    var key = (keys[i] && keys[i].name) ? keys[i].name : i;
                    // Parameter key will be its key or the iteration index. This is useful if a wildcard (*) is matched
                    req.params[key] = (value) ? decodeURIComponent(value) : undefined;
                });
                // Call handler
                handler.call(self, req, event);
            }
            // Returns self
            return self;
        }
        // Invoke and add listeners -- this uses less code
        return invoke().on('initialized hashchange', invoke);
    }
    /**
     * Add an event listener
     *
     * @param {String|Array} event
     * @param {Function} callback
     * @return self
    */
    Grapnel.prototype.on = Grapnel.prototype.bind = function(event, handler){
        var self = this,
            events = event.split(' ');

        this._forEach(events, function(event){
            if(self.events[event]){
                self.events[event].push(handler);
            }else{
                self.events[event] = [handler];
            }
        });

        return this;
    }
    /**
     * Call Grapnel().router constructor for backwards compatibility
     *
     * @return {self} Router
    */
    Grapnel.Router = Grapnel.prototype.router = Grapnel;
    /**
     * Allow context
     *
     * @param {String} Route context
     * @return {Function} Adds route to context
    */
    Grapnel.prototype.context = function(context){
        var self = this;

        return function(value, callback){
            var prefix = (context.slice(-1) !== '/') ? context + '/' : context,
                pattern = prefix + value;

            return self.get.call(self, pattern, callback);
        }
    }
    /**
     * Create routes based on an object
     *
     * @param {Object} Routes
     * @return {self} Router
    */
    Grapnel.listen = function(routes){
        // Return a new Grapnel instance
        return (function(){
            // TODO: Accept multi-level routes
            for(var key in routes){
                this.get.call(this, key, routes[key]);
            }

            return this;
        }).call(new Grapnel());
    }
    // Window or module?
    if('function' === typeof root.define){
        root.define(function(require){
            return Grapnel;
        });
    }else if('object' === typeof exports){
        exports.Grapnel = Grapnel;
    }else{
        root.Grapnel = Grapnel;
    }

}).call({}, window);

},{}],4:[function(require,module,exports){
"use strict";
var Grapnel, Warden, find,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

find = function(list, fn) {
  var i, _i, _len;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    i = list[_i];
    if (fn(i)) {
      return i;
    }
  }
  return null;
};

Grapnel = require('./grapnel').Grapnel;

Warden = (function(_super) {
  __extends(Warden, _super);

  function Warden(opts) {
    var action, route;
    if (opts == null) {
      opts = {};
    }
    this.match = __bind(this.match, this);
    this.findController = __bind(this.findController, this);
    this.navigate = __bind(this.navigate, this);
    Warden.__super__.constructor.apply(this, arguments);
    if (opts.routes instanceof Function) {
      opts.routes(this.match);
    } else if (opts.routes instanceof Object) {
      for (route in routes) {
        action = routes[route];
        this.match(route, action);
      }
    }
  }

  Warden.replaceLinksToHashChange = function() {
    if (typeof $ === "undefined" || $ === null) {
      throw 'Require jQuery or zepto';
    }
    return $('body').on('click', 'a', (function(_this) {
      return function(event) {
        var href;
        event.preventDefault();
        href = $(event.target).attr('href').replace(/^(#|\/)/, '');
        return Warden.navigate(href);
      };
    })(this));
  };

  Warden.navigate = function(path) {
    path = path.replace(/^(#|\/)/, '');
    return location.href = '#' + path;
  };

  Warden.prototype.navigate = function(path) {
    return Warden.navigate(path, this.pushState);
  };

  Warden.prototype.findController = function(controllerName) {
    return require("controllers/" + controllerName + "-controller");
  };

  Warden.prototype.match = function(route, requirement) {
    var Controller, action, actionName, continueAnyway, controllerName, _ref;
    _ref = requirement.split('#'), controllerName = _ref[0], actionName = _ref[1];
    Controller = this.findController(controllerName);
    continueAnyway = function(maybePromise, next) {
      var _ref1;
      return (_ref1 = maybePromise != null ? typeof maybePromise.then === "function" ? maybePromise.then(next) : void 0 : void 0) != null ? _ref1 : next();
    };
    action = (function(_this) {
      return function(req) {
        var lastController, _ref1, _ref2;
        lastController = (_ref1 = _this.currentController) != null ? _ref1 : {};
        _this.currentController = new Controller({
          pushState: _this.pushState
        });
        _this.currentController.setLastUsings((_ref2 = lastController.usings) != null ? _ref2 : []);
        return continueAnyway(_this.currentController.beforeAction(req.params), function() {
          return continueAnyway(_this.currentController[actionName](req.params), function() {
            _this.currentController.fix();
            return continueAnyway(typeof lastController.dispose === "function" ? lastController.dispose() : void 0, function() {
              return continueAnyway(_this.currentController.afterAction(req.params), function() {
                try {
                  return window.dispatchEvent(new CustomEvent('warden:routed', {
                    req: req,
                    controllerName: controllerName,
                    actionName: actionName
                  }));
                } catch (_error) {}
              });
            });
          });
        });
      };
    })(this);
    return this.get(route, action);
  };

  return Warden;

})(Grapnel);

Warden.Controller = (function() {
  function Controller(opts) {
    this.dispose = __bind(this.dispose, this);
    this.navigate = __bind(this.navigate, this);
    this.reuse = __bind(this.reuse, this);
    var _ref;
    this.pushState = (_ref = opts != null ? opts.pushState : void 0) != null ? _ref : false;
    this.fixed = false;
    this.lastUsings = [];
    this.usings = [];
  }

  Controller.findInstance = function(usings, target) {
    var _ref, _ref1;
    return (_ref = (_ref1 = find(usings, function(using) {
      if ((typeof target) === 'string') {
        return using.key === target;
      } else if (target instanceof Function) {
        return using.instance.constructor === target;
      } else if (target instanceof Object) {
        return using.instance === target;
      }
    })) != null ? _ref1.instance : void 0) != null ? _ref : null;
  };

  Controller.prototype._createInstance = function(maybeNewable) {
    var _ref;
    if (maybeNewable instanceof Function) {
      if (!(maybeNewable.prototype.dispose instanceof Function)) {
        console.warn("This class does not have dispose", maybeNewable);
      }
      return new maybeNewable;
    } else if (maybeNewable instanceof Object) {
      if (!(maybeNewable.dispose instanceof Function)) {
        console.warn("This object does not have dispose", maybeNewable);
      }
      return maybeNewable;
    } else {
      throw new Error("Warden can't compose " + ((_ref = maybeNewable != null ? typeof maybeNewable.toString === "function" ? maybeNewable.toString() : void 0 : void 0) != null ? _ref : maybeNewable));
    }
  };

  Controller.prototype.setLastUsings = function(lastUsings) {
    this.lastUsings = lastUsings;
  };

  Controller.prototype._reuseFrom = function(usings, target, maybeNewable) {
    var instance, key, _ref;
    instance = (_ref = this.constructor.findInstance(usings, target)) != null ? _ref : this._createInstance(maybeNewable != null ? maybeNewable : target);
    key = (typeof target) === 'string' ? target : instance;
    this.usings.push({
      instance: instance,
      key: key
    });
    return instance;
  };

  Controller.prototype.reuse = function(target, maybeNewable) {
    if (maybeNewable == null) {
      maybeNewable = null;
    }
    if (this.fixed) {
      throw 'Post fixed reuse exception';
    }
    return this._reuseFrom(this.lastUsings, target, maybeNewable);
  };

  Controller.prototype.use = function(target, maybeNewable) {
    var instance;
    if (!this.fixed) {
      throw 'Pre fixed use exception';
    }
    instance = this.constructor.findInstance(this.usings, target);
    if (instance != null) {
      return instance;
    }
    return this._reuseFrom(this.usings, target, maybeNewable);
  };

  Controller.prototype.navigate = function(path) {
    return Warden.navigate(path);
  };

  Controller.prototype.fix = function() {
    var alsoUsed, used, _i, _len, _ref;
    if (this.fixed) {
      throw 'Warden.Controller#fix can be called only once';
    }
    _ref = this.lastUsings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      used = _ref[_i];
      alsoUsed = this.constructor.findInstance(this.usings, used.key);
      if (alsoUsed == null) {
        used.instance.dispose();
      }
    }
    this.fixed = true;
    return delete this.lastUsings;
  };

  Controller.prototype.dispose = function() {
    return delete this.usings;
  };

  Controller.prototype.beforeAction = function(params) {};

  Controller.prototype.afterAction = function(params) {};

  return Controller;

})();

if ('function' === typeof window.define) {
  window.define(function(require) {
    return Warden;
  });
} else {
  window.Warden = Warden;
}


},{"./grapnel":3}],5:[function(require,module,exports){
require('./bower_components/libretto/libretto');

require('./bower_components/momic/momic');

require('./bower_components/warden/src/warden');

window.mz = {};

mz.Model = Momic.Model;

mz.Router = Warden;

mz.Controller = Warden.Controller;

mz.Scenario = Libretto;

mz.Application = (function() {
  function Application() {}

  Application.prototype.setup = function(options) {
    return new Promise((function(_this) {
      return function(done) {
        var _ref, _ref1;
        return mz.Model.setup({
          name: (_ref = options != null ? options.name : void 0) != null ? _ref : 'app',
          collections: (_ref1 = options != null ? options.collections : void 0) != null ? _ref1 : []
        }).then(function() {
          var init;
          init = function() {
            window.removeEventListener('warden:routed', init);
            return done();
          };
          window.addEventListener('warden:routed', init);
          return mz.router = new mz.Router(opts.router);
        });
      };
    })(this));
  };

  return Application;

})();


},{"./bower_components/libretto/libretto":1,"./bower_components/momic/momic":2,"./bower_components/warden/src/warden":4}]},{},[5])